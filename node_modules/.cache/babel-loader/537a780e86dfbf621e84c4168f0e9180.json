{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = [];\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    addTodo: (state, action) => {\n      const newTodo = {\n        title: action.payload,\n        id: Date.now(),\n        completed: false\n      };\n      state.push(newTodo);\n    },\n    toggleTodo: (state, action) => {\n      const todo = state.find(todo => todo.id === action.payload);\n\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    },\n    removeTodo: (state, action) => {\n      const index = state.findIndex(todo => todo.id === action.payload);\n\n      if (index !== -1) {\n        state.splice(index, 1);\n      }\n    }\n  }\n});\nexport const {\n  addTodo,\n  toggleTodo,\n  removeTodo\n} = todosSlice.actions;\nexport default todosSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","todosSlice","name","reducers","addTodo","state","action","newTodo","title","payload","id","Date","now","completed","push","toggleTodo","todo","find","removeTodo","index","findIndex","splice","actions","reducer"],"sources":["/Users/a1/Documents/kholiavko-todo/src/redux/reducer.tsx"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport {ITodo} from \"../Components/interfaces\";\n\ninterface TodosState extends Array<ITodo> {}\n\nconst initialState: TodosState = [];\n\nconst todosSlice = createSlice({\n    name: 'todos',\n    initialState,\n    reducers: {\n        addTodo: (state, action: PayloadAction<string>) => {\n            const newTodo: ITodo = {\n                title: action.payload,\n                id: Date.now(),\n                completed: false,\n            };\n            state.push(newTodo);\n        },\n        toggleTodo: (state, action: PayloadAction<number>) => {\n            const todo = state.find((todo) => todo.id === action.payload);\n            if (todo) {\n                todo.completed = !todo.completed;\n            }\n        },\n        removeTodo: (state, action: PayloadAction<number>) => {\n            const index = state.findIndex((todo) => todo.id === action.payload);\n            if (index !== -1) {\n                state.splice(index, 1);\n            }\n        },\n    },\n});\n\nexport const { addTodo, toggleTodo, removeTodo } = todosSlice.actions;\nexport default todosSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAKA,MAAMC,YAAwB,GAAG,EAAjC;AAEA,MAAMC,UAAU,GAAGF,WAAW,CAAC;EAC3BG,IAAI,EAAE,OADqB;EAE3BF,YAF2B;EAG3BG,QAAQ,EAAE;IACNC,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA0C;MAC/C,MAAMC,OAAc,GAAG;QACnBC,KAAK,EAAEF,MAAM,CAACG,OADK;QAEnBC,EAAE,EAAEC,IAAI,CAACC,GAAL,EAFe;QAGnBC,SAAS,EAAE;MAHQ,CAAvB;MAKAR,KAAK,CAACS,IAAN,CAAWP,OAAX;IACH,CARK;IASNQ,UAAU,EAAE,CAACV,KAAD,EAAQC,MAAR,KAA0C;MAClD,MAAMU,IAAI,GAAGX,KAAK,CAACY,IAAN,CAAYD,IAAD,IAAUA,IAAI,CAACN,EAAL,KAAYJ,MAAM,CAACG,OAAxC,CAAb;;MACA,IAAIO,IAAJ,EAAU;QACNA,IAAI,CAACH,SAAL,GAAiB,CAACG,IAAI,CAACH,SAAvB;MACH;IACJ,CAdK;IAeNK,UAAU,EAAE,CAACb,KAAD,EAAQC,MAAR,KAA0C;MAClD,MAAMa,KAAK,GAAGd,KAAK,CAACe,SAAN,CAAiBJ,IAAD,IAAUA,IAAI,CAACN,EAAL,KAAYJ,MAAM,CAACG,OAA7C,CAAd;;MACA,IAAIU,KAAK,KAAK,CAAC,CAAf,EAAkB;QACdd,KAAK,CAACgB,MAAN,CAAaF,KAAb,EAAoB,CAApB;MACH;IACJ;EApBK;AAHiB,CAAD,CAA9B;AA2BA,OAAO,MAAM;EAAEf,OAAF;EAAWW,UAAX;EAAuBG;AAAvB,IAAsCjB,UAAU,CAACqB,OAAvD;AACP,eAAerB,UAAU,CAACsB,OAA1B"},"metadata":{},"sourceType":"module"}